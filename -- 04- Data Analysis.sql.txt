-- 04- Data Analysis.sql
-- Analyze the minimum and maximum dates in the dataset

SELECT 
  MIN(started_at) AS min_date,
  MAX(ended_at) AS max_date
FROM 
  `leafy-sanctuary-412122.cyclistic_data.cyclistic_data_2019_cleaned`;

-- How do annual members and casual riders use Cyclistic bikes differently

SELECT
  member_casual AS rider_type,
  ROUND(AVG(TIMESTAMP_DIFF(ended_at, started_at, MINUTE)), 2) AS avg_ride_time_minutes
FROM 
  `leafy-sanctuary-412122.cyclistic_data.cyclistic_data_2019_cleaned`
GROUP BY 
  rider_type
ORDER BY 
  avg_ride_time_minutes DESC;



-- Explore whether casual riders are more likely to ride on weekends compared to members.


SELECT
  member_casual AS rider_type,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM started_at) IN (1, 7) THEN 'Weekend'
    ELSE 'Weekday'
  END AS day_type,
  COUNT(*) AS total_rides
FROM
  `leafy-sanctuary-412122.cyclistic_data.cyclistic_data_2019_cleaned`
WHERE
  started_at IS NOT NULL
GROUP BY
  rider_type, day_type
ORDER BY
  rider_type, day_type;


-- Trip length by rider 


SELECT
  member_casual AS rider_type,
  AVG(TIMESTAMP_DIFF(ended_at, started_at, MINUTE)) AS avg_trip_length_minutes,
  MAX(TIMESTAMP_DIFF(ended_at, started_at, MINUTE)) AS max_trip_length_minutes,
  MIN(TIMESTAMP_DIFF(ended_at, started_at, MINUTE)) AS min_trip_length_minutes,
  COUNT(*) AS total_trips
FROM
  `leafy-sanctuary-412122.cyclistic_data.cyclistic_data_2019_cleaned`
WHERE
  ended_at IS NOT NULL AND started_at IS NOT NULL
  AND TIMESTAMP_DIFF(ended_at, started_at, MINUTE) > 0 -- Exclude invalid trip durations
GROUP BY
  rider_type
ORDER BY
  avg_trip_length_minutes DESC;


-- Trip length by rider weekends vs weekday 


SELECT
  member_casual AS rider_type,
  CASE
    WHEN EXTRACT(DAYOFWEEK FROM started_at) IN (1, 7) THEN 'Weekend'
    ELSE 'Weekday'
  END AS day_type,
  AVG(TIMESTAMP_DIFF(ended_at, started_at, MINUTE)) AS avg_trip_length_minutes,
  MAX(TIMESTAMP_DIFF(ended_at, started_at, MINUTE)) AS max_trip_length_minutes,
  MIN(TIMESTAMP_DIFF(ended_at, started_at, MINUTE)) AS min_trip_length_minutes,
  COUNT(*) AS total_trips
FROM
  `leafy-sanctuary-412122.cyclistic_data.cyclistic_data_2019_cleaned`
WHERE
  ended_at IS NOT NULL AND started_at IS NOT NULL
  AND TIMESTAMP_DIFF(ended_at, started_at, MINUTE) > 0 -- Exclude invalid trip durations
GROUP BY
  rider_type, day_type
ORDER BY
  rider_type, day_type;


-- Analyze peak hours of usage by rider type

SELECT 
  EXTRACT(HOUR FROM started_at) AS hour_of_day,
  member_casual AS rider_type,
  COUNT(*) AS ride_count
FROM 
  `leafy-sanctuary-412122.cyclistic_data.cyclistic_data_2019_cleaned`
GROUP BY 
  hour_of_day, rider_type
ORDER BY 
  rider_type, ride_count DESC;

-- Calculate the number of trips per month
SELECT
  EXTRACT(YEAR FROM started_at) AS trip_year,
  EXTRACT(MONTH FROM started_at) AS trip_month,
  COUNT(*) AS total_trips
FROM
  `leafy-sanctuary-412122.cyclistic_data.cyclistic_data_2019_cleaned`
GROUP BY
  trip_year, trip_month
ORDER BY
  trip_year, trip_month;


-- Calculate the number of trips per month

SELECT
  EXTRACT(YEAR FROM started_at) AS trip_year,
  EXTRACT(MONTH FROM started_at) AS trip_month,
  COUNT(*) AS total_trips
FROM
  `leafy-sanctuary-412122.cyclistic_data.cyclistic_data_2019_cleaned`
GROUP BY
  trip_year, trip_month
ORDER BY
  trip_year, trip_month;


-- Calculate the number of trips per week

SELECT 
  EXTRACT(YEAR FROM started_at) AS trip_year,
  EXTRACT(WEEK FROM started_at) AS trip_week,
  COUNT(*) AS total_trips
FROM 
  `leafy-sanctuary-412122.cyclistic_data.cyclistic_data_2019_cleaned`
WHERE 
  started_at IS NOT NULL
GROUP BY 
  trip_year, trip_week
ORDER BY 
  trip_year, trip_week;


-- Number of trips per hour
SELECT 
  EXTRACT(HOUR FROM started_at) AS trip_hour,
  COUNT(*) AS total_trips
FROM 
  `leafy-sanctuary-412122.cyclistic_data.cyclistic_data_2019_cleaned`
WHERE 
  started_at IS NOT NULL
GROUP BY 
  trip_hour
ORDER BY 
  trip_hour;


-- Average ride length per month 

SELECT 
  EXTRACT(YEAR FROM started_at) AS trip_year,
  EXTRACT(MONTH FROM started_at) AS trip_month,
  ROUND(AVG(TIMESTAMP_DIFF(ended_at, started_at, MINUTE)), 2) AS avg_ride_length_minutes
FROM 
  `leafy-sanctuary-412122.cyclistic_data.cyclistic_data_2019_cleaned`
WHERE 
  ended_at IS NOT NULL AND started_at IS NOT NULL
  AND TIMESTAMP_DIFF(ended_at, started_at, MINUTE) > 0 -- Exclude invalid trip durations
GROUP BY 
  trip_year, trip_month
ORDER BY 
  trip_year, trip_month;


-- Average ride length per day of week 

SELECT
  CASE 
    WHEN EXTRACT(DAYOFWEEK FROM started_at) = 1 THEN 'Sunday'
    WHEN EXTRACT(DAYOFWEEK FROM started_at) = 2 THEN 'Monday'
    WHEN EXTRACT(DAYOFWEEK FROM started_at) = 3 THEN 'Tuesday'
    WHEN EXTRACT(DAYOFWEEK FROM started_at) = 4 THEN 'Wednesday'
    WHEN EXTRACT(DAYOFWEEK FROM started_at) = 5 THEN 'Thursday'
    WHEN EXTRACT(DAYOFWEEK FROM started_at) = 6 THEN 'Friday'
    WHEN EXTRACT(DAYOFWEEK FROM started_at) = 7 THEN 'Saturday'
  END AS day_of_week,
  ROUND(AVG(TIMESTAMP_DIFF(ended_at, started_at, MINUTE)), 2) AS avg_ride_length_minutes
FROM
  `leafy-sanctuary-412122.cyclistic_data.cyclistic_data_2019_cleaned`
WHERE
  ended_at IS NOT NULL 
  AND started_at IS NOT NULL
  AND TIMESTAMP_DIFF(ended_at, started_at, MINUTE) > 0 -- Exclude invalid durations
GROUP BY
  day_of_week
ORDER BY
  CASE 
    WHEN day_of_week = 'Sunday' THEN 1
    WHEN day_of_week = 'Monday' THEN 2
    WHEN day_of_week = 'Tuesday' THEN 3
    WHEN day_of_week = 'Wednesday' THEN 4
    WHEN day_of_week = 'Thursday' THEN 5
    WHEN day_of_week = 'Friday' THEN 6
    WHEN day_of_week = 'Saturday' THEN 7
  END;




-- Aggregate by Top Stations
SELECT
  start_station_name,
  end_station_name,
  COUNT(*) AS total_rides
FROM
  `leafy-sanctuary-412122.cyclistic_data.cyclistic_data_2019_cleaned`
WHERE
  start_station_name IS NOT NULL
  AND end_station_name IS NOT NULL
GROUP BY
  start_station_name, end_station_name
ORDER BY
  total_rides DESC
LIMIT 100; -- Adjust this limit as needed



-- Analyze by Rider Type: Casual

SELECT
  start_station_name,
  end_station_name,
  COUNT(*) AS number_of_rides
FROM
  `leafy-sanctuary-412122.cyclistic_data.cyclistic_data_2019_cleaned`
WHERE
  start_station_name IS NOT NULL
  AND end_station_name IS NOT NULL
  AND member_casual = 'casual'
GROUP BY
  start_station_name, end_station_name
ORDER BY
  number_of_rides DESC
LIMIT 100;


-- Aggregate Popular Routes

SELECT
  CONCAT(start_station_name, ' -> ', end_station_name) AS route,
  member_casual AS rider_type,
  COUNT(*) AS number_of_rides
FROM
  `leafy-sanctuary-412122.cyclistic_data.cyclistic_data_2019_cleaned`
WHERE
  start_station_name IS NOT NULL
  AND end_station_name IS NOT NULL
GROUP BY
  route, rider_type
ORDER BY
  number_of_rides DESC
LIMIT 100;


-- Summarize Results by Start Station 


SELECT
  start_station_name,
  member_casual AS rider_type,
  COUNT(*) AS total_rides
FROM
  `leafy-sanctuary-412122.cyclistic_data.cyclistic_data_2019_cleaned`
WHERE
  start_station_name IS NOT NULL
GROUP BY
  start_station_name, rider_type
ORDER BY
  total_rides DESC
LIMIT 100;



-- Summarize Results by End Station 


SELECT
  end_station_name,
  member_casual AS rider_type,
  COUNT(*) AS total_rides
FROM
  `leafy-sanctuary-412122.cyclistic_data.cyclistic_data_2019_cleaned`
WHERE
  end_station_name IS NOT NULL
GROUP BY
  end_station_name, rider_type
ORDER BY
  total_rides DESC
LIMIT 100;




-- Average Ride Length Per Month with Month Name
SELECT
  FORMAT_TIMESTAMP('%b', TIMESTAMP(started_at)) AS month_name, -- Jan, Feb, etc.
  EXTRACT(MONTH FROM started_at) AS month_number, -- Used for correct sorting
  member_casual AS rider_type,
  ROUND(AVG(TIMESTAMP_DIFF(ended_at, started_at, MINUTE)), 2) AS avg_ride_length_minutes,
  COUNT(*) AS total_trips
FROM
  `leafy-sanctuary-412122.cyclistic_data.cyclistic_data_2019_cleaned`
WHERE
  ended_at IS NOT NULL
  AND started_at IS NOT NULL
  AND TIMESTAMP_DIFF(ended_at, started_at, MINUTE) > 0 -- Exclude invalid durations
GROUP BY
  month_name, month_number, rider_type
ORDER BY
  month_number ASC; -- Ensures correct month order



-- Total Trips Per Day of Week Per Rider Type
SELECT
  CASE 
    WHEN EXTRACT(DAYOFWEEK FROM started_at) = 1 THEN 'Sunday'
    WHEN EXTRACT(DAYOFWEEK FROM started_at) = 2 THEN 'Monday'
    WHEN EXTRACT(DAYOFWEEK FROM started_at) = 3 THEN 'Tuesday'
    WHEN EXTRACT(DAYOFWEEK FROM started_at) = 4 THEN 'Wednesday'
    WHEN EXTRACT(DAYOFWEEK FROM started_at) = 5 THEN 'Thursday'
    WHEN EXTRACT(DAYOFWEEK FROM started_at) = 6 THEN 'Friday'
    WHEN EXTRACT(DAYOFWEEK FROM started_at) = 7 THEN 'Saturday'
  END AS day_of_week,
  member_casual AS rider_type,
  COUNT(*) AS total_trips
FROM
  `leafy-sanctuary-412122.cyclistic_data.cyclistic_data_2019_cleaned`
WHERE
  ended_at IS NOT NULL 
  AND started_at IS NOT NULL
GROUP BY
  day_of_week, rider_type
ORDER BY
  CASE 
    WHEN day_of_week = 'Sunday' THEN 1
    WHEN day_of_week = 'Monday' THEN 2
    WHEN day_of_week = 'Tuesday' THEN 3
    WHEN day_of_week = 'Wednesday' THEN 4
    WHEN day_of_week = 'Thursday' THEN 5
    WHEN day_of_week = 'Friday' THEN 6
    WHEN day_of_week = 'Saturday' THEN 7
  END, 
  rider_type;

